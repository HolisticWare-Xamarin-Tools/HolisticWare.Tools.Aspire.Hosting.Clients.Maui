using System.Collections;
using System.Collections.Immutable;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace HolisticWare.Aspire.Hosting.Maui;

/// <summary>
/// 
/// </summary>
/// <href="https://github.com/wilder-minds/MinimalApiDiscovery/blob/main/src/MinimalApiDiscoveryGenerator/MapApiGenerator.cs" />
[Generator]
public partial class
    EndPointListGenerator
    :
        IIncrementalGenerator
{
    public
        void
                                        Initialize
                                        (
                                            IncrementalGeneratorInitializationContext context
                                        )
    {
        /*
        SyntaxValueProvider apiClasses = context.SyntaxProvider
            .CreateSyntaxProvider
            (
                predicate: static (s, _) => { return true; },
                transform: (n, cn) => { }
            )
            .Where(static m => m.Valid);
        
        context
            .RegisterSourceOutput();
                //.RegisterSourceOutput(apiClasses.Collect(), Execute);
        */
        
        return;
    }

    static
        void
                                        Execute
                                        (
                                            SourceProductionContext context,
                                            ImmutableArray<(string Name, bool Warn, bool Valid)> typeList
                                        )
    {
        // for debugging
        // Task.Delay(10000).GetAwaiter().GetResult();
        // logging/tracing
        // File.WriteAllText("HolisticWare.Aspire.Hosting.Maui.EndPointListGenerator.log", "mc++");
        
        
        if (typeList.IsDefaultOrEmpty)
        {
            return;
        }

        if (typeList.Count() > 0)
        {
            context.CancellationToken.ThrowIfCancellationRequested();

            StringBuilder sb = new StringBuilder();

            string code_namespace_root =
                    "HolisticWare.Tools.Aspire.Hosting.Clients.Maui"
                // TODO: Aspire SDK extension to grab RootNamespace of Maui project
                ;
            string code =
                $$"""
                  // <auto-generated/>
                  using System;
                  namespace {{code_namespace_root}}.Services.Clients.Maui;

                  public partial class ServiceEndpoints
                  {
                      public Dictionary<string, string> Data = new Dictionary<string, string>
                      {
                          /*
                          { "catalogservice", "http://catalogservice"},
                          { "basketservice", "http://basketservice"},
                          */
                      }
                  }
                  """;
            sb.Append(code);

            var theCode = sb.ToString();
            context.AddSource("MinimalApiDiscovery.g.cs", SourceText.From(theCode, Encoding.UTF8));
        }
    }
}